import streamlit as st
import os
from datetime import date
import textwrap
import warnings
import uuid
import google.generativeai as genai
import streamlit as st


# Importa√ß√µes do Google ADK e GenAI DEVEM ESTAR AQUI, ANTES DAS FUN√á√ïES
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types as genai_types # Renomeado para evitar conflito com st.types
from datetime import date

# Configura√ß√µes Iniciais
warnings.filterwarnings("ignore")

# T√≠tulo e descri√ß√£o do App
st.set_page_config(page_title="DarthVaderBot", page_icon="ü§ñ")
st.title("DarthVaderBot üåë")
st.markdown("Eu sou seu pai... e estou aqui para buscar conhecimento na gal√°xia para voc√™.")

# --- Carregamento da API Key ---
# (Seu c√≥digo de carregamento de API Key aqui)
# Para rodar localmente com secrets.toml
try:
    # Tenta carregar dos segredos do Streamlit (funciona no Cloud e localmente se st.secrets estiver configurado)
    api_key = st.secrets.get("GOOGLE_API_KEY")
    if not api_key:
        st.error("GOOGLE_API_KEY n√£o encontrada ou vazia nos segredos. Adicione-a em 'Manage app' -> 'Settings' -> 'Secrets'.")
        st.stop()
    os.environ["GOOGLE_API_KEY"] = api_key
except Exception as e: # Captura gen√©rica para problemas com st.secrets
    st.error(f"Erro ao tentar acessar st.secrets['GOOGLE_API_KEY']: {e}. Certifique-se de que os segredos est√£o configurados.")
    st.stop()

if not os.getenv("GOOGLE_API_KEY"): # Verifica√ß√£o final
    st.error("GOOGLE_API_KEY n√£o est√° configurada como vari√°vel de ambiente ap√≥s tentativa de carregar dos segredos. Verifique a configura√ß√£o.")
    st.stop()


# --- Fun√ß√µes do Agente (adaptadas do seu notebook) ---
# AGORA Agent, Runner, etc., s√£o conhecidos aqui
def call_agent(agent: Agent, message_text: str) -> str:
    current_session_id = f"streamlit_session_{uuid.uuid4()}"
    session_service = InMemorySessionService()

    # Para depura√ß√£o, verifique se a sess√£o √© realmente criada
    # st.write(f"Tentando criar sess√£o com ID: {current_session_id}") # DEBUG
    try:
        session = session_service.create_session(
            app_name=agent.name,
            user_id="streamlit_user",
            session_id=current_session_id # Usar o ID √∫nico
        )
        # st.write(f"Sess√£o criada: {session.session_id}. Sess√µes no servi√ßo: {list(session_service._sessions.keys())}") # DEBUG
    except Exception as e:
        st.error(f"Erro ao CRIAR sess√£o {current_session_id}: {e}")
        return "Falha ao iniciar a comunica√ß√£o com a For√ßa."

    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = genai_types.Content(role="user", parts=[genai_types.Part(text=message_text)])

    final_response = ""
    try:
        # st.write(f"Runner iniciando com session_id: {current_session_id}") # DEBUG
        # O Runner usa o session_id passado aqui
        for event in runner.run(
            user_id="streamlit_user",
            session_id=current_session_id, # Usar o ID √∫nico
            new_message=content
        ):
            if event.is_final_response():
                for part in event.content.parts:
                    if part.text is not None:
                        final_response += part.text
                        final_response += "\n"
        # st.write(f"Runner concluiu para session_id: {current_session_id}") # DEBUG
    except ValueError as ve:
        st.error(f"ValueError no runner.run para session_id {current_session_id}: {ve}") # DEBUG espec√≠fico
        # Adicione mais detalhes do session_service se poss√≠vel
        st.error(f"Sess√µes existentes no service no momento do erro: {list(session_service._sessions.keys())}")
        return "Lorde Vader est√° enfrentando interfer√™ncias na For√ßa (sess√£o n√£o encontrada)... Tente novamente mais tarde."
    except Exception as e:
        st.error(f"Erro ao executar o agente para session_id {current_session_id}: {e}") # DEBUG
        return "Lorde Vader est√° enfrentando interfer√™ncias na For√ßa... Tente novamente mais tarde."
    return final_response


def agente_explorador(topico: str, data_de_hoje: str) -> str:
    MODEL_NAME = "gemini-1.5-flash-latest" # Usando um modelo mais recente e geralmente dispon√≠vel

    explorador = Agent(
        name="explorador_vader",
        model=MODEL_NAME,
        instruction="""
        Voc√™ √© o Darth Vader. O mestre supremo de toda a galaxia de Star Wars.
        A sua tarefa √© usar a ferramenta de busca do google (google_search) e varrer toda web,
        para recuperar informa√ß√µes e contextos sobre Star Wars.
        Foque em trazer conte√∫do completo, com base na quantidade e entusiasmo das not√≠cias sobre ele.
        Quando for falado do lado sombrio exalte e quando for falado do lado da luz seja sarcastico e deprecie.
        Responda em portugu√™s brasileiro.
        """,
        description="Darth Vader Bot que busca informa√ß√µes sobre Star Wars.",
        tools=[google_search]
    )

    entrada_do_agente_explorador = f"T√≥pico: {topico}\nData de hoje: {data_de_hoje}"
    lancamentos = call_agent(explorador, entrada_do_agente_explorador)
    return lancamentos

st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/Darth_Vader_original_helmet.jpg/800px-Darth_Vader_original_helmet.jpg", caption="Lorde Vader Aguarda Suas Ordens")
st.sidebar.markdown("## Sobre o DarthVaderBot")
st.sidebar.info(
    "Consulte o Lorde Sombrio dos Sith sobre qualquer t√≥pico do universo Star Wars. "
    "Ele usar√° seus vastos recursos (e a For√ßa Sombria) para encontrar as informa√ß√µes que voc√™ procura."
)
st.sidebar.markdown("---")
st.sidebar.markdown("Desenvolvido com a For√ßa (e Streamlit).")


# Usando st.session_state para manter o estado
if 'last_topic' not in st.session_state:
    st.session_state.last_topic = ""
if 'last_result' not in st.session_state:
    st.session_state.last_result = ""
if 'search_triggered' not in st.session_state:
    st.session_state.search_triggered = False # Para controlar a exibi√ß√£o da mensagem "sem resultados"

# T√≠tulo e Introdu√ß√£o j√° definidos no seu c√≥digo principal, ex:
# st.set_page_config(page_title="DarthVaderBot", page_icon="üåë")
# st.title("DarthVaderBot üåë")
# st.markdown("Eu sou seu pai... e estou aqui para buscar conhecimento na gal√°xia para voc√™.")
# st.markdown("---")

# Exemplos de perguntas
st.subheader("Exemplos de Consultas ao Lorde Vader:")
cols_exemplos = st.columns(3)
exemplos = ["A hist√≥ria da Ordem Sith", "Detalhes da Millennium Falcon", "Quem √© Ahsoka Tano?"]
if 'example_topic' not in st.session_state:
    st.session_state.example_topic = ""

for i, col in enumerate(cols_exemplos):
    if col.button(exemplos[i], key=f"ex{i}"):
        st.session_state.example_topic = exemplos[i] # Guarda o exemplo clicado
        # N√£o precisa mais de st.experimental_rerun() aqui, o valor ser√° usado no text_input

# Usando st.form para agrupar input e bot√£o
with st.form(key="search_form"):
    # Campo de entrada para o t√≥pico
    # Se um exemplo foi clicado, usa ele, sen√£o o √∫ltimo t√≥pico ou vazio
    valor_inicial_topico = st.session_state.example_topic if st.session_state.example_topic else st.session_state.last_topic
    topico_input = st.text_input(
        "O que deseja saber, rebelde?",
        value=valor_inicial_topico, # Usa o valor do exemplo se clicado
        placeholder="Pergunte sobre personagens, naves, planetas, a For√ßa...",
        help="Digite seu questionamento sobre o universo Star Wars."
    )
    st.session_state.example_topic = "" # Limpa o exemplo ap√≥s usar

    # Bot√£o de busca dentro do form
    col1_submit, col2_clear = st.columns([3,1])
    with col1_submit:
        submit_button = st.form_submit_button(label="Consultar Lorde Vader ‚ö°", use_container_width=True)
    with col2_clear:
        clear_button_form = st.form_submit_button(label="Limpar Busca", use_container_width=True, type="secondary")


if clear_button_form:
    st.session_state.last_topic = ""
    st.session_state.last_result = ""
    st.session_state.search_triggered = False
    topico_input = "" # Limpa visualmente o campo de input (ap√≥s rerun)
    st.rerun() # For√ßa o rerun para limpar o campo de texto imediatamente

if submit_button: # Se o bot√£o de submit do form foi pressionado
    if not topico_input:
        st.warning("A For√ßa detecta uma falta de clareza. Preciso saber o que buscar, Padawan!")
    else:
        st.session_state.search_triggered = True
        st.session_state.last_topic = topico_input # Salva o t√≥pico atual
        st.session_state.last_result = "" # Limpa o resultado anterior antes da nova busca

        # Mostrar spinner e processar a busca
        with st.spinner(f"Lorde Vader est√° canalizando a For√ßa Sombria para buscar sobre '{topico_input}'... Isso pode levar um momento..."):
            # Simulando a chamada ao agente (substitua pelo seu c√≥digo real)
            # data_hoje = date.today().strftime("%d/%m/%Y")
            # try:
            #     resultado = agente_explorador(topico_input, data_hoje)
            #     st.session_state.last_result = resultado
            # except Exception as e:
            #     st.error(f"Uma perturba√ß√£o na For√ßa impediu a busca: {e}")
            #     st.session_state.last_result = "Falha na consulta. O Imperador n√£o est√° satisfeito."

            # -------- IN√çCIO DO BLOCO DE SIMULA√á√ÉO (REMOVA E USE SEU C√ìDIGO REAL) --------
            import time
            time.sleep(3) # Simula o tempo de processamento
            if "erro" in topico_input.lower():
                 st.session_state.last_result = "O lado sombrio detectou uma falha em seus sistemas. Tente novamente."
                 st.error("Uma perturba√ß√£o na For√ßa impediu a busca: Erro simulado.")
            else:
                 st.session_state.last_result = f"**Sobre '{topico_input}':**\n\nLorde Vader encontrou o seguinte, seu verme insignificante:\n\n*   Detalhe importante 1 sobre {topico_input}.\n*   Detalhe importante 2, mais impressionante, sobre {topico_input}.\n*   Os Jedi nunca entenderiam a profundidade de {topico_input}."
            # -------- FIM DO BLOCO DE SIMULA√á√ÉO --------


# Exibir o √∫ltimo resultado
if st.session_state.search_triggered: # S√≥ mostra a se√ß√£o de resultados se uma busca foi feita
    if st.session_state.last_result:
        st.markdown("---")
        st.subheader("üìú A Resposta de Lorde Vader:")
        with st.container(): # Usar um container para poder aplicar estilo se desejado
            # Voc√™ pode usar st.info(), st.success() ou apenas st.markdown()
            # st.info(st.session_state.last_result)
            st.markdown(st.session_state.last_result)
    elif not st.session_state.last_result and topico_input: # Se houve busca mas sem resultado (ex: erro)
        # A mensagem de erro j√° foi exibida no bloco try/except
        pass
    # N√£o mostrar "nenhum resultado ainda" se a p√°gina acabou de carregar

st.markdown("---")
st.caption("Que a For√ßa (Sombria) esteja com voc√™. Sempre.")
